#!/usr/bin/env bash
#  Copyright (c) 2024 Greg Rynkowski. All rights reserved.
#  License: MIT License

###
#  Script providing 'latest' command.
#
#  Standalone usage:
#
#    ./bin/latest-stable
#
#  To see debug logs use env var `DEBUG=true`.
#
###

# Bash Strict Mode Settings
set -euo pipefail
# Path Initialization
if [ -z "${SHELL_GR_DIR:-}" ]; then
  SCRIPT_PATH_1="${BASH_SOURCE[0]:-$0}"
  SCRIPT_PATH="$([[ ! "${SCRIPT_PATH_1}" =~ /bash$ ]] && readlink -f "${SCRIPT_PATH_1}" || echo "")"
  SCRIPT_DIR="$([ -n "${SCRIPT_PATH}" ] && (cd "$(dirname "${SCRIPT_PATH}")" && pwd -P) || echo "")"
  ROOT_DIR="$([ -n "${SCRIPT_DIR}" ] && (cd "${SCRIPT_DIR}/.." && pwd -P) || echo "/tmp")"
  SHELL_GR_DIR="${ROOT_DIR}/.github_deps/rynkowsg/shell-gr@8a2c37d"
fi
# Library Sourcing
# shellcheck source=./lib/common.bash
source "${ROOT_DIR}/lib/common.bash" # GH_REPO
# shellcheck source=./lib/log.bash
source "${ROOT_DIR}/lib/log.bash" # log_debug_f
# shellcheck source=./lib/versions.bash
source "${ROOT_DIR}/lib/versions.bash" # list_all_versions sort_versions

latest_stable() {
  local curl_opts=(-sI)
  # If GITHUB_API_TOKEN defined, add it request headers
  # Not authorized user has certain quota for making API request to Github.
  # If user provides in environment GITHUB_API_TOKEN, can lift it up.
  if [ -n "${GITHUB_API_TOKEN:-}" ]; then
    curl_opts=("${curl_opts[@]}" -H "Authorization: token ${GITHUB_API_TOKEN}")
  fi

  # By default try to get the latest from github latest URL.
  # It is done with curl. When it requests REPO/releases/latest, it expects to receive 302 to another URL.
  # This value is saved at redirect_url.
  # - if (redirect_url = "REPO/releases/tag/v<VERSION>"), then take such a VERSION
  # - otherwise (redirect_url == "REPO/releases"), then take the latest based on list of versions.
  local version redirect_url
  redirect_url=$(curl "${curl_opts[@]}" "${GH_REPO}/releases/latest" | sed -n -e "s|^location: *||p" | sed -n -e "s|\r||p")
  log_debug_f "redirect url: %s\n" "${redirect_url}"
  if [[ "${redirect_url}" != "${GH_REPO}/releases" ]]; then
    version="$(printf "%s\n" "${redirect_url}" | sed 's|.*/tag/v\{0,1\}||')"
  else
    version="$(list_all_versions | sort_versions | tail -n1 | xargs echo)"
  fi

  printf "%s\n" "$version"
}

main() {
  latest_stable
}

main "$@"
